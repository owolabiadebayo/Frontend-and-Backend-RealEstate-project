let Register,bcrypt;_af3‍.x([["register",()=>register]]);_af3‍.w("../model/register",[["default",["Register"],function(v){Register=v}]]);_af3‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);



       const register = async (req, res) => {

    try{
        _af3‍.g.console.log(req.body);
        let userExist = await Register.findOne({ email:req.body.email }).exec();

        if (userExist) return res.status(400).send("Email is taken");

        //hash password
        const salt = await bcrypt.genSalt(10);
        const hashpassword = await bcrypt.hash(req.body.password, salt);
        _af3‍.g.console.log(hashpassword);
        // register
        const user = new Register({
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            password: hashpassword,
            email: req.body.email
        });
        _af3‍.g.console.log(user);
        await user.save();
        _af3‍.g.console.log("USER CREATED", user);
        return res.json({ ok: true });
    } 
    catch (err) {
        _af3‍.g.console.log("CREATE USER FAILED", err);
        return res.status(400).send("Error. Try again.");
    }
};
